name: DevOps CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.10.13

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

  test:
    name: Test
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.10.12

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt

    - name: Criar arquivo .env
      run: |
        echo "SQLALCHEMY_DATABASE_URL='${{ secrets.ENV_SQL }}'" >> $GITHUB_WORKSPACE/.env
        echo "SECRET_KEY='${{ secrets.ENV_SECRET_KEY }}'" >> $GITHUB_WORKSPACE/.env
        echo "SECRET_ALGORITHM='${{ secrets.ENV_SECRET_ALGORITHM }}'" >> $GITHUB_WORKSPACE/.env
        echo "URL_RESET_PASSWORD='${{ secrets.ENV_URL_RESET_PASSWORD }}'" >> $GITHUB_WORKSPACE/.env
        echo "MAIL_USERNAME='${{ secrets.ENV_MAIL_USERNAME }}'" >> $GITHUB_WORKSPACE/.env
        echo "MAIL_PASSWORD='${{ secrets.ENV_MAIL_PASSWORD }}'" >> $GITHUB_WORKSPACE/.env

    - name: Rodar testes
      run: |
          source venv/bin/activate
          pytest tests/

  sast:
    name: CodeQL
    runs-on: ${{ 'ubuntu-latest' }}
    timeout-minutes: ${{ 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write
    needs: [build, test]

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
  dast:
    permissions:
      contents: read
      security-events: write
    name: StackHawk
    runs-on: ubuntu-latest
    needs: [build, test, sast]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.12

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Criar arquivo .env
        run: |
          echo "SQLALCHEMY_DATABASE_URL='${{ secrets.ENV_SQL }}'" >> $GITHUB_WORKSPACE/.env
          echo "SECRET_KEY='${{ secrets.ENV_SECRET_KEY }}'" >> $GITHUB_WORKSPACE/.env
          echo "SECRET_ALGORITHM='${{ secrets.ENV_SECRET_ALGORITHM }}'" >> $GITHUB_WORKSPACE/.env
          echo "URL_RESET_PASSWORD='${{ secrets.ENV_URL_RESET_PASSWORD }}'" >> $GITHUB_WORKSPACE/.env
          echo "MAIL_USERNAME='${{ secrets.ENV_MAIL_USERNAME }}'" >> $GITHUB_WORKSPACE/.env
          echo "MAIL_PASSWORD='${{ secrets.ENV_MAIL_PASSWORD }}'" >> $GITHUB_WORKSPACE/.env
      
      - name: Start your service
        run: |
          source venv/bin/activate
          uvicorn app.main:app &

      - name: Run HawkScan
        uses: stackhawk/hawkscan-action@4c3258cd62248dac6d9fe91dd8d45928c697dee0
        continue-on-error: true
        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}
          codeScanningAlerts: true
          githubToken: ${{ github.token }}

  artifact:
    name: Criar artefato
    runs-on: ubuntu-latest
    needs: [build, test]
  
    steps:
      - name: Gerar artefato
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: ./
          
  deploy:
    name: Deploy Azure
    runs-on: ubuntu-latest
    needs: [build, test, sast, dast, artifact]

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: python-app

      - name: Deploy to server
        env:
            SSH: ${{ secrets.AZURE_SSH }}
            HOST: ${{ secrets.AZURE_APP }}
        run: |
          # Add chave SSH
          mkdir -p ~/.ssh
          echo "$SSH" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host em known hosts
          ssh-keyscan $HOST >> ~/.ssh/known_hosts

          # Add permissão para o usuário azureuser
          #ssh azureuser@$HOST 'sudo chown -R azureuser:azureuser /app/data/app/*'

          # Deploy artifact
          scp -r ./app/ azureuser@$HOST:/app/data/

          # Ativar o ambiente virtual
          ssh azureuser@$HOST 'source /app/data/venv/bin/activate'

          # Instalar os requisitos do pip
          ssh azureuser@$HOST 'pip install -r /app/data/requirements.txt'

          # Reiniciar serviço
          ssh azureuser@$HOST 'sudo systemctl restart gunicorn.service'
 
